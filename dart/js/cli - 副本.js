//全局变量 var off = false; //开关1，控制镖盘转动var on = false; //开关2, 控制点击var off2 = false; //开关3，控制转动var dartX = 0; //飞镖的X坐标var dartY = 0; //飞镖的Y坐标var quadrant; //飞镖所在的象限var du = 0; //镖盘旋转的角度var timeRotate=setInterval("rotate()",50);var timeReady=setInterval("ready()",1000);var num = 4; //倒计时var pointNow; //得分var timeNum = $(".timeNum");var time = 60;/*----------------------*/var controlX = 0;var controlY = 0;var controlP = 0;var controlSF = false;var move1 = $(".move1");var move2 = $(".move2");var move3 = $(".move3");var move4 = $(".move4");var move5 = $(".move5");var move6 = $(".move6");/*----------------------*/var ray = $(".game .ready");//$(".game img").eq(1).css("animation-play-state","paused");//阻止右键菜单$(document).ready(function(){    $(document).bind("contextmenu",function(e){        return false;    });});//阻止长按菜单window.ontouchstart = function(e) {     e.preventDefault(); };//倒计时函数function ready(){	if(on)	{		ray.css("display","block");		switch(num)		{			case 4:			ray.text("3");			num = num - 1;			break;						case 3:			ray.text("2");			num = num - 1;			break;						case 2:			ray.text("1");			num = num - 1;			break;						case 1:			ray.text("");			off = true;			off2 = true;			on = false;			disNo = true;			$(".fire").css("display","block");			$(".direction").css("display","block");			$(".game .disc").css("display","block");			timeNum.css("display","block");			break;						default:			alert("error ready");			break;		}	}		/*if(off2){		timeNum.text(time);		time--;	}	if(time < 0){		timeEnd();	}*/}//退出函数function timeEnd(){	timeNum.css("display","none");	$(".timeBtn").css("display","block");}//旋转函数function rotate(){	if(off2){		du += 10;		$(".game img").eq(1).css("transform",'rotate('+du+'deg)');		$(".son").eq(0).css("transform",'rotate('+du+'deg)');		if(du>=360){			du = 0;		}		//$("#temp1").text('镖盘度数：'+du);	}}//发射函数function fire(){	if(off){ //镖盘是否开始转动		var x, y; //准头+蓄力		//玩家是否移动了手柄		if(moveOff){			//移动了，飞镖就等于准头的位置+蓄力的值			/*x = (parseInt(obj3.style.left)-(5-width));			y = (parseInt(obj3.style.top)-1-(5-width));*///位置			x = (parseFloat(obj3.style.left))+1-(5-width)/2;			y = (parseFloat(obj3.style.top))+1-(5-width)/2;//位置		}		else{			//没移动，飞镖就在镖盘的中心附近			/*x = 15-(5-width)+3.5;			y = 15-1-(5-width)+10.5;*/			x = 15-(5-width)/2;			y = 15-(5-width)/2;		}		//飞镖的位置		var game = $(".game"); //游戏区域		dartY = y;		dartX = x;		/*----------------------------------------------------*/		//定义原点(o1, o2)		/*var o1 = ($(window).height() / 2) - (parseInt(game.css("top")));		var o2 = ($(window).width() / 2) - (parseInt(game.css("left")));*/		//var o1 = $(window).height() / 2; //定义原点(o1, o2)		//var o2 = $(window).width() / 2;		var o1 = 150;		var o2 = 150;		//定义飞镖坐标(x1, y1)		var x1 = (dartY)*10 - o1;		var y1 = (dartX)*10 - o2;		var xyO = Math.sqrt(x1*x1 + y1*y1); //飞镖到原点的距离		//判断象限		if(x1 >= 0 && y1 >= 0){			//第一象限			quadrant = 1;		}		if(x1 < 0 && y1 >= 0){			//第二象限			quadrant = 2;		}		if(x1 < 0 && y1 < 0){			//第三象限			quadrant = 3;		}		if(x1 >= 0 && y1 < 0){			//第四象限			quadrant = 4;		}		//飞出镖盘外		if((parseInt(xyO)) > 140){			switch(quadrant){				case 1:					dartX -= (xyO - 140)/1.0/10;					dartY -= (xyO - 140)/1.0/10;				break;								case 2:					dartX -= (xyO - 140)/1.0/10;					dartY += (xyO - 140)/1.0/10;				break;								case 3:					dartX += (xyO - 140)/1.0/10;					dartY += (xyO - 140)/1.0/10;				break;								case 4:					dartX += (xyO - 140)/1.0/10;					dartY -= (xyO - 140)/1.0/10;				break;								default:					alert("error 飞出镖盘外");			}		}		var dart1 = $(".dart").eq(0); //正常情况		var dart2 = $(".dart").eq(1); //特殊情况		//后台控制了之后		if(controlX != 0 || controlY != 0){			dartX = controlX;			dartY = controlY;			dart2.css({"top":50+'rem',"left":30+'rem',"display":"block"});			dart2.animate({left:dartX,top:dartY,},300);			pointNow = controlP;			off2 = false; //镖盘停止旋转			//timeEnd();		}		else{			dart1.css({"top":50+'rem',"left":30+'rem',"display":"block"});			dart1.animate({left:dartX+'rem',top:dartY+'rem',},300);						off2 = false; //镖盘停止旋转			//timeEnd();						var x2 = Math.abs(x1); //定义邻边长度			var y2 = Math.abs(y1); //定义对边长度			var cos1 = (xyO*xyO + x2*x2 - y2*y2) / (2*x2*xyO); //余弦值			var cos2 = Math.acos(cos1) * (180/Math.PI); //角度			var cos = cos2 + du; //旋转后的角度						//追回角度			if(quadrant == 1){				if(cos < 90){					cos = cos2 + du;				}				else if(cos >= 90 && cos < 180){					cos = 180 - cos2 - du;					quaDown();				}				else if(cos >= 180 && cos < 270){					cos = cos2 + du - 180;					quaDown();					quaDown();				}				else if(cos >= 270 && cos < 360){					cos = 360 - cos;					quaDown();					quaDown();					quaDown();				}				else if(cos > 360){					cos = cos2 + du - 360;				}			}			else if(quadrant == 2){				cos = cos2 - du				if(cos >= 0){					cos = cos2 - du;				}				else if(cos >= -90 && cos < 0){					cos = du - cos2;					quaDown();				}				else if(cos >= -180 && cos < -90){					cos = 180 - du + cos2;					quaDown();					quaDown();				}				else if(cos >= -270 && cos < -180){					cos = du - cos2 - 180;					quaDown();					quaDown();					quaDown();				}				else if(cos < -270){					cos = cos2 - du + 360;				}			}			else if(quadrant == 3){				if(cos < 90){					cos = cos2 + du;				}				else if(cos >= 90 && cos < 180){					cos = 180 - cos2 - du;					quaDown();				}				else if(cos >= 180 && cos < 270){					cos = du + cos2 - 180;					quaDown();					quaDown();				}				else if(cos >= 270 && cos <360){					cos = du + cos2 - 270;					quaDown();					quaDown();					quaDown();				}				else if(cos > 360){					cos = du + cos2 - 360;				}			}			else if(quadrant = 4){				cos = cos2 - du				if(cos >= 0){					cos = cos2 - du;				}				else if(cos >= -90 && cos < 0){					cos = du - cos2;					quaDown();				}				else if(cos >= -180 && cos < -90){					cos = 180 - du + cos2;					quaDown();					quaDown();				}				else if(cos >= -270 && cos < -180){					cos = du - cos2 - 180;					quaDown();					quaDown();					quaDown();				}				else if(cos < -270){					cos = 360 - du + cos2;				}			}			//下移象限			function quaDown(){				switch(quadrant){					case 1:						quadrant = 2;					break;					case 2:						quadrant = 3;					break;					case 3:						quadrant = 4;					break;					case 4:						quadrant = 1;					break;					default:						alert("error quadrant");					break;				}			}			//判断分数			//0~30:3, 30~60:2, 60~90:1(第一象限的情况)			//Math.PI = 180度			if(quadrant == 1){				if(cos <= 90 && cos > 60){					pointNow = 2; //60~90				}				else if(cos <= 60 && cos > 30){					pointNow = 3;	 //30~60				}				else if(cos <= 30 && cos > 0){					pointNow = 6;	 //0~30				}			}			else if(quadrant == 2){				if(cos <= 90 && cos > 60){					pointNow = 5;	 //60~90				}				else if(cos <= 60 && cos > 30){					pointNow = 4;	 //30~60				}				else if(cos <= 30 && cos > 0){					pointNow = 5;	 //0~30				}			}			else if(quadrant == 3){				if(cos <= 90 && cos > 60){					pointNow = 1; //60~90				}				else if(cos <= 60 && cos > 30){					pointNow = 6;	 //30~60				}				else if(cos <= 30 && cos > 0){					pointNow = 3;	 //0~30				}			}			else if(quadrant == 4){				if(cos <= 90 && cos > 60){					pointNow = 4;	 //60~90				}				else if(cos <= 60 && cos > 30){					pointNow = 1;	 //30~60				}				else if(cos <= 30 && cos > 0){					pointNow = 2;	 //0~30				}			}		}		//$("#temp1").text(cos);		//$("#temp2").text('飞镖象限：'+quadrant);		//$("#temp3").text('飞镖度数：'+cos);		//$("#temp4").text(quadrant);		$("#temp5").css("display","block");		$("#temp5 b").text(pointNow);		//得分传给后台		return pointNow;	}};/*给后台的*/function plugIn(pointNum){	let radX = (Math.random()*30)-15;	let radY = (Math.random()*30)-15;	switch(pointNum){		case 1:			controlX = parseInt(move1.css("left"));				controlX += radX;			controlY = parseInt(move1.css("top"));			controlY += radY;			controlP = 1;			controlSF = true;		break;					case 2:			controlX = parseInt(move4.css("left"));				controlX += radX;			controlY = parseInt(move4.css("top"));			controlY += radY;			controlP = 2;			controlSF = true;		break;					case 3:			controlX = parseInt(move5.css("left"));				controlX += radX;			controlY = parseInt(move5.css("top"));			controlY += radY;			controlP = 3;			controlSF = true;		break;				case 4:			controlX = parseInt(move2.css("left"));				controlX += radX;			controlY = parseInt(move2.css("top"));			controlY += radY;			controlP = 4;			controlSF = true;		break;				case 5:			controlX = parseInt(move3.css("left"));				controlX += radX;			controlY = parseInt(move3.css("top"));			controlY += radY;			controlP = 5;			controlSF = true;		break;				case 6:			controlX = parseInt(move6.css("left"));				controlX += radX;			controlY = parseInt(move6.css("top"));			controlY += radY;			controlP = 6;			controlSF = true;		break;					default:			alert("error plugIn");		break;	}	return controlP;}	